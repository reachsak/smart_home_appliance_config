"use strict";
exports.__esModule = true;
exports.AdjustType = exports.SceneType = exports.DevicePropery = exports.StartFlowAction = exports.CommandType = exports.ColorMode = exports.DeviceStatus = void 0;
var DeviceStatus;
(function (DeviceStatus) {
    DeviceStatus["ON"] = "on";
    DeviceStatus["OFF"] = "off";
})(DeviceStatus = exports.DeviceStatus || (exports.DeviceStatus = {}));
var ColorMode;
(function (ColorMode) {
    ColorMode[ColorMode["WHITE"] = 1] = "WHITE";
    ColorMode[ColorMode["COLOR"] = 2] = "COLOR";
    ColorMode[ColorMode["FLOW"] = 3] = "FLOW";
})(ColorMode = exports.ColorMode || (exports.ColorMode = {}));
/** */
var CommandType;
(function (CommandType) {
    CommandType["SET_POWER"] = "set_power";
    CommandType["TOGGLE"] = "toggle";
    CommandType["SET_DEFAULT"] = "set_default";
    CommandType["START_COLOR_FLOW"] = "start_cf";
    CommandType["STOP_COLOR_FLOW"] = "stop_cf";
    CommandType["GET_PROPS"] = "get_prop";
    CommandType["SET_SCENE"] = "set_scene";
    CommandType["SET_CT_ABX"] = "set_ct_abx";
    CommandType["SET_RGB"] = "set_rgb";
    CommandType["SET_HSV"] = "set_hsv";
    CommandType["SET_BRIGHT"] = "set_bright";
    CommandType["CRON_ADD"] = "cron_add";
    CommandType["CRON_GET"] = "cron_get";
    CommandType["CRON_DEL"] = "cron_del";
    CommandType["SET_ADJUST"] = "set_adjust";
    CommandType["SET_MUSIC"] = "set_music";
    CommandType["SET_NAME"] = "set_name";
    CommandType["ADJUST_BRIGHT"] = "adjust_bright";
    CommandType["ADJUST_CT"] = "adjust_ct";
    CommandType["ADJUST_COLOR"] = "adjust_color";
    CommandType["PING"] = "ping";
})(CommandType = exports.CommandType || (exports.CommandType = {}));
/**
 * the action taken after the flow is stopped.
 */
var StartFlowAction;
(function (StartFlowAction) {
    /** smart LED recover to the state before the color flow started. */
    StartFlowAction[StartFlowAction["LED_RECOVER"] = 0] = "LED_RECOVER";
    /** 1 means smart LED stay at the state when the flow is stopped */
    StartFlowAction[StartFlowAction["LED_STAY"] = 1] = "LED_STAY";
    /** turn off the smart LED after the flow is stopped. */
    StartFlowAction[StartFlowAction["LED_OFF"] = 2] = "LED_OFF";
})(StartFlowAction = exports.StartFlowAction || (exports.StartFlowAction = {}));
/**
 * The supported properties
 */
var DevicePropery;
(function (DevicePropery) {
    DevicePropery["POWER"] = "power";
    DevicePropery["BRIGHT"] = "bright";
    DevicePropery["CT"] = "ct";
    DevicePropery["RGB"] = "rgb";
    DevicePropery["HUE"] = "hue";
    DevicePropery["SAT"] = "sat";
    DevicePropery["COLOR_MODE"] = "color_mode";
    DevicePropery["FLOWING"] = "flowing";
    DevicePropery["DELAYOFF"] = "delayoff";
    DevicePropery["FLOW_PARAMS"] = "flow_params";
    DevicePropery["MUSIC_ON"] = "music_on";
    DevicePropery["NAME"] = "name";
    DevicePropery["BG_POWER"] = "bg_power";
    DevicePropery["BG_FLOWING"] = "bg_flowing";
    DevicePropery["BG_FLOW_PARAMS"] = "bg_flow_params";
    DevicePropery["BG_CT"] = "bg_ct";
    DevicePropery["BG_LMODE"] = "bg_lmode";
    DevicePropery["BG_BRIGHT"] = "bg_bright";
    DevicePropery["BG_HUE"] = "bg_hue";
    DevicePropery["BG_SAT"] = "bg_sat";
    DevicePropery["BG_RGB"] = "bg_rgb";
    DevicePropery["NL_BR"] = "nl_br";
    DevicePropery["ACTIVE_MODE"] = "active_mode";
})(DevicePropery = exports.DevicePropery || (exports.DevicePropery = {}));
/**
 * Scene type
 */
var SceneType;
(function (SceneType) {
    /** change the smart LED to specified color and brightness. */
    SceneType["COLOR"] = "color";
    SceneType["HSV"] = "hsv";
    SceneType["CT"] = "ct";
    SceneType["CF"] = "cf";
    SceneType["AUTO_DELAY_OFF"] = "auto_delay_off";
})(SceneType = exports.SceneType || (exports.SceneType = {}));
/**
 * Adjust type
 */
var AdjustType;
(function (AdjustType) {
    AdjustType["INCREASE"] = "increase";
    AdjustType["DECREASE"] = "decrease";
    AdjustType["CIRCLE"] = "circle";
})(AdjustType = exports.AdjustType || (exports.AdjustType = {}));
//# sourceMappingURL=enums.js.map